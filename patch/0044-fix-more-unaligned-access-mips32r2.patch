--- /dev/null	2024-12-26 00:11:56.425999992 +0800
+++ b/package/kernel/mac80211/patches/subsys/367-add-unaligned-functions.patch	2024-12-27 20:13:19.291009321 +0800
@@ -0,0 +1,24 @@
+--- a/backport-include/linux/etherdevice.h	2024-10-05 00:14:45.000000000 +0800
++++ b/backport-include/linux/etherdevice.h	2024-12-27 19:58:18.902284409 +0800
+@@ -33,4 +33,21 @@ static inline int backport_device_get_ma
+ #define device_get_mac_address LINUX_BACKPORT(device_get_mac_address)
+ #endif /* LINUX_VERSION_IS_LESS(5,16,0) */
+ 
++#if LINUX_VERSION_IS_LESS(6,7,0)
++#define is_multicast_ether_addr_unaligned LINUX_BACKPORT(is_multicast_ether_addr_unaligned)
++static inline bool is_multicast_ether_addr_unaligned(const u8 *addr)
++{
++	u16 a = get_unaligned((const u16 *)addr);
++	return 0x01 & (a >> ((sizeof(a) * 8) - 8));
++}
++#endif
++
++#if LINUX_VERSION_IS_LESS(6,7,0)
++#define is_broadcast_ether_addr_unaligned LINUX_BACKPORT(is_broadcast_ether_addr_unaligned)
++static inline bool is_broadcast_ether_addr_unaligned(const u8 *addr)
++{	
++	return memcmp(addr, "\xff\xff\xff\xff\xff\xff", ETH_ALEN) == 0;
++}
++#endif
++
+ #endif /* _BACKPORT_LINUX_ETHERDEVICE_H */
--- /dev/null	2024-12-26 00:11:56.425999992 +0800
+++ b/package/kernel/mac80211/patches/subsys/368-fix-mesh-mips-unaligned.patch	2024-12-27 20:12:43.012067304 +0800
@@ -0,0 +1,152 @@
+--- a/net/mac80211/mesh_hwmp.c	2024-10-05 00:14:44.000000000 +0800
++++ b/net/mac80211/mesh_hwmp.c	2024-12-27 20:10:29.749261054 +0800
+@@ -440,7 +440,11 @@ static u32 hwmp_route_info_get(struct ie
+ 		new_metric = MAX_METRIC;
+ 	exp_time = TU_TO_EXP_TIME(orig_lifetime);
+ 
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	if (ether_addr_equal(orig_addr, sdata->vif.addr)) {
++#else
++	if (ether_addr_equal_unaligned(orig_addr, sdata->vif.addr)) {
++#endif
+ 		/* This MP is the originator, we are not interested in this
+ 		 * frame, except for updating transmitter's path info.
+ 		 */
+@@ -522,7 +526,11 @@ static u32 hwmp_route_info_get(struct ie
+ 
+ 	/* Update and check transmitter routing info */
+ 	ta = mgmt->sa;
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	if (ether_addr_equal(orig_addr, ta))
++#else
++	if (ether_addr_equal_unaligned(orig_addr, ta))
++#endif
+ 		fresh_info = false;
+ 	else {
+ 		fresh_info = true;
+@@ -598,7 +606,11 @@ static void hwmp_preq_frame_process(stru
+ 
+ 	mhwmp_dbg(sdata, "received PREQ from %pM\n", orig_addr);
+ 
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	if (ether_addr_equal(target_addr, sdata->vif.addr)) {
++#else
++	if (ether_addr_equal_unaligned(target_addr, sdata->vif.addr)) {
++#endif
+ 		mhwmp_dbg(sdata, "PREQ is for us\n");
+ 		forward = false;
+ 		reply = true;
+@@ -614,7 +626,11 @@ static void hwmp_preq_frame_process(stru
+ 			ifmsh->last_sn_update = jiffies;
+ 		}
+ 		target_sn = ifmsh->sn;
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	} else if (is_broadcast_ether_addr(target_addr) &&
++#else
++	} else if (is_broadcast_ether_addr_unaligned(target_addr) &&
++#endif
+ 		   (target_flags & IEEE80211_PREQ_TO_FLAG)) {
+ 		rcu_read_lock();
+ 		mpath = mesh_path_lookup(sdata, orig_addr);
+@@ -723,7 +739,11 @@ static void hwmp_prep_frame_process(stru
+ 		  PREP_IE_TARGET_ADDR(prep_elem));
+ 
+ 	orig_addr = PREP_IE_ORIG_ADDR(prep_elem);
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	if (ether_addr_equal(orig_addr, sdata->vif.addr))
++#else
++	if (ether_addr_equal_unaligned(orig_addr, sdata->vif.addr))
++#endif
+ 		/* destination, no forwarding required */
+ 		return;
+ 
+@@ -800,7 +820,11 @@ static void hwmp_perr_frame_process(stru
+ 		spin_lock_bh(&mpath->state_lock);
+ 		sta = next_hop_deref_protected(mpath);
+ 		if (mpath->flags & MESH_PATH_ACTIVE &&
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 		    ether_addr_equal(ta, sta->sta.addr) &&
++#else
++		    ether_addr_equal_unaligned(ta, sta->sta.addr) &&
++#endif
+ 		    !(mpath->flags & MESH_PATH_FIXED) &&
+ 		    (!(mpath->flags & MESH_PATH_SN_VALID) ||
+ 		    SN_GT(target_sn, mpath->sn)  || target_sn == 0)) {
+@@ -846,7 +870,11 @@ static void hwmp_rann_frame_process(stru
+ 	orig_metric = le32_to_cpu(rann->rann_metric);
+ 
+ 	/*  Ignore our own RANNs */
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	if (ether_addr_equal(orig_addr, sdata->vif.addr))
++#else
++	if (ether_addr_equal_unaligned(orig_addr, sdata->vif.addr))
++#endif
+ 		return;
+ 
+ 	mhwmp_dbg(sdata,
+@@ -1236,7 +1264,11 @@ void mesh_path_refresh(struct ieee80211_
+ 	if (time_after(jiffies,
+ 		       mpath->exp_time -
+ 		       msecs_to_jiffies(sdata->u.mesh.mshcfg.path_refresh_time)) &&
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	    (!addr || ether_addr_equal(sdata->vif.addr, addr)))
++#else
++	    (!addr || ether_addr_equal_unaligned(sdata->vif.addr, addr)))
++#endif
+ 		mesh_queue_preq(mpath, PREQ_Q_F_START | PREQ_Q_F_REFRESH);
+ }
+ 
+--- a/net/mac80211/mesh_pathtbl.c	2024-10-05 00:14:44.000000000 +0800
++++ b/net/mac80211/mesh_pathtbl.c	2024-12-27 20:03:59.741571876 +0800
+@@ -683,11 +683,19 @@ struct mesh_path *mesh_path_add(struct i
+ 	struct mesh_table *tbl;
+ 	struct mesh_path *mpath, *new_mpath;
+ 
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	if (ether_addr_equal(dst, sdata->vif.addr))
++#else
++	if (ether_addr_equal_unaligned(dst, sdata->vif.addr))
++#endif
+ 		/* never add ourselves as neighbours */
+ 		return ERR_PTR(-EOPNOTSUPP);
+ 
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	if (is_multicast_ether_addr(dst))
++#else
++	if (is_multicast_ether_addr_unaligned(dst))
++#endif
+ 		return ERR_PTR(-EOPNOTSUPP);
+ 
+ 	if (atomic_add_unless(&sdata->u.mesh.mpaths, 1, MESH_MAX_MPATHS) == 0)
+@@ -726,11 +734,19 @@ int mpp_path_add(struct ieee80211_sub_if
+ 	struct mesh_path *new_mpath;
+ 	int ret;
+ 
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	if (ether_addr_equal(dst, sdata->vif.addr))
++#else
++	if (ether_addr_equal_unaligned(dst, sdata->vif.addr))
++#endif
+ 		/* never add ourselves as neighbours */
+ 		return -EOPNOTSUPP;
+ 
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 	if (is_multicast_ether_addr(dst))
++#else
++	if (is_multicast_ether_addr_unaligned(dst))
++#endif
+ 		return -EOPNOTSUPP;
+ 
+ 	new_mpath = mesh_path_new(sdata, dst, GFP_ATOMIC);
+@@ -854,7 +870,11 @@ static void mpp_flush_by_proxy(struct ie
+ 
+ 	spin_lock_bh(&tbl->walk_lock);
+ 	hlist_for_each_entry_safe(mpath, n, &tbl->walk_head, walk_list) {
++#if defined(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS)
+ 		if (ether_addr_equal(mpath->mpp, proxy))
++#else
++		if (ether_addr_equal_unaligned(mpath->mpp, proxy))
++#endif
+ 			__mesh_path_del(tbl, mpath);
+ 	}
+ 	spin_unlock_bh(&tbl->walk_lock);
--- /dev/null	2024-12-26 00:11:56.425999992 +0800
+++ b/target/linux/ath79/patches-6.6/901-fix-more-unaligned_access_hacks.patch	2024-12-27 20:23:21.094841896 +0800
@@ -0,0 +1,11 @@
+--- a/net/core/neighbour.c	2024-12-26 23:42:20.359790877 +0800
++++ b/net/core/neighbour.c	2024-12-27 20:21:30.110077778 +0800
+@@ -740,7 +740,7 @@ EXPORT_SYMBOL(__neigh_create);
+ 
+ static u32 pneigh_hash(const void *pkey, unsigned int key_len)
+ {
+-	u32 hash_val = *(u32 *)(pkey + key_len - 4);
++	u32 hash_val = net_hdr_word(pkey + key_len - 4);
+ 	hash_val ^= (hash_val >> 16);
+ 	hash_val ^= hash_val >> 8;
+ 	hash_val ^= hash_val >> 4;
--- /dev/null	2024-12-26 00:11:56.425999992 +0800
+++ b/target/linux/ramips/patches-6.6/901-fix-more-unaligned_access_hacks.patch	2024-12-27 20:23:21.094841896 +0800
@@ -0,0 +1,11 @@
+--- a/net/core/neighbour.c	2024-12-26 23:42:20.359790877 +0800
++++ b/net/core/neighbour.c	2024-12-27 20:21:30.110077778 +0800
+@@ -740,7 +740,7 @@ EXPORT_SYMBOL(__neigh_create);
+ 
+ static u32 pneigh_hash(const void *pkey, unsigned int key_len)
+ {
+-	u32 hash_val = *(u32 *)(pkey + key_len - 4);
++	u32 hash_val = net_hdr_word(pkey + key_len - 4);
+ 	hash_val ^= (hash_val >> 16);
+ 	hash_val ^= hash_val >> 8;
+ 	hash_val ^= hash_val >> 4;
